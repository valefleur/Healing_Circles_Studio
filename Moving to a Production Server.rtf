{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww12600\viewh7280\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Moving to a Production Server\
\
Standard web servers were not designed to run Python web apps (consider the handling of Jinja2 code).  Python web apps instead use an intermediate server to translate the code to a format understood by standard web servers.  Long story short, the Python server built into Flask is great for getting started, but is not production worthy and should be replaced by something more secure and robust early on in any project.\
\
Today, we will be moving the website for Healing Circles Studio from the built-in Flask server to Gunicorn, an open source Python web server ported from Ruby\'92s Unicorn project.\
\
Read the official documentation here: http://docs.gunicorn.org/en/stable/\
I\'92m also following this tutorial: https://coderwall.com/p/pstm1w/deploying-a-flask-app-at-heroku\
This one is better for beginners: https://medium.com/@gitaumoses4/deploying-a-flask-application-on-heroku-e509e5c76524\
Here is a thorough overview of Python web servers: https://www.fullstackpython.com/wsgi-servers.html\
\
Install Gunicorn and Run Locally\
1. Install Gunicorn with pip\
  pip3 install gunicorn\
2. Now the web app can be run with this command:\
  gunicorn webapp:app\
  a. In the command, webapp.py is the name of the file holding my Python web app, and the variable referencing the web app within the code is \'91app\'92.  This is where we get the webapp:app part of the command.}